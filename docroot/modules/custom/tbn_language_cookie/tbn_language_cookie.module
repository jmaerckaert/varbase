<?php

use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\tbn_language_cookie\Plugin\LanguageNegotiation\LanguageNegotiationCookie;
use Drupal\language\Plugin\LanguageNegotiation\LanguageNegotiationUrl;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\Cookie;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tbn_language_cookie_form_language_cookie_admin_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  Drupal::service('tbn_language_cookie.language_cookie_admin_alter_form')->alterForm($form, $form_state, $form_id);
}

/**
 * Implements hook_language_switch_links_alter().
 */
function tbn_language_cookie_language_switch_links_alter(array &$links, $type, Url $url) {
  $negotiator = Drupal::service('language_negotiator');
  if ($negotiator->isNegotiationMethodEnabled(LanguageNegotiationUrl::METHOD_ID)) {
    $config = Drupal::config('language_cookie.negotiation');
    if ($config->get('js_cookie_redirect')) {
      foreach ($links as $langcode => &$link) {
        $link['attributes']['data-language'] = $langcode;
      }
    }
  }
}

/**
 * Implements hook_block_view_alter().
 */
function tbn_language_cookie_block_view_alter(array &$build, BlockPluginInterface $block) {
  if ($block->getPluginId() === 'language-selection-page') {
    $config = Drupal::config('language_cookie.negotiation');
    if ($config->get('js_cookie_redirect')) {
      $build['#attributes']['class'][] = 'hidden';
    }
  }
}

/**
 * Implements hook_language_negotiation_info_alter().
 */
function tbn_language_cookie_language_negotiation_info_alter(array &$negotiation_info) {
  $negotiator = Drupal::service('language_negotiator');
  if (isset($negotiation_info[LanguageNegotiationCookie::METHOD_ID]) && !$negotiator->isNegotiationMethodEnabled(LanguageNegotiationUrl::METHOD_ID)) {
    $negotiation_info[LanguageNegotiationCookie::METHOD_ID]['class'] = LanguageNegotiationCookie::class;
    $negotiation_info[LanguageNegotiationCookie::METHOD_ID]['types'] = [
      LanguageInterface::TYPE_INTERFACE,
      LanguageInterface::TYPE_CONTENT,
      LanguageInterface::TYPE_URL
    ];
  }
}

/**
 * Implements hook_language_cookie_alter().
 */
function tbn_language_cookie_language_cookie_alter(Cookie &$cookie) {
  $config = Drupal::config('language_cookie.negotiation');
  if ($config->get('js_cookie_redirect')) {
    // Set httpOnly to FALSE so we can use it in the client side script.
    $cookie = new Cookie($cookie->getName(), $cookie->getValue(), $cookie->getExpiresTime(), $cookie->getPath(), $cookie->getDomain(), $cookie->isSecure(), FALSE, $cookie->isRaw(), $cookie->getSameSite());
  }
}